<script lang="ts" setup>
import { onMounted, ref } from 'vue'

class UrlBuilder {
	private cache: string | null = null;
	private parameters: Record<string, string> = {};

	public constructor(private prefix: string) {
	}

	public getParameter = (name: string, defaultValue: string): string => {
		return this.parameters[name] ?? defaultValue;
	};

	public setParameter = (name: string, value: string | null): void => {
		const parameter = this.parameters[name];
		if (parameter == value) {
			return;
        }
		this.cache = null;
		if (value == null) {
			delete this.parameters[name];
        } else {
			this.parameters[name] = String(value);
        }
	};

	public toString = (): string => {
		if (this.cache == null) {
			let url = '';
			const entries = Object.entries(this.parameters);
			for (const entry of entries) {
				const name = encodeURIComponent(entry[0]);
				const value = encodeURIComponent(entry[1]);
				url += (url ? '&' : '?') + name + '=' + value;
			}
			this.cache = this.prefix + url;
		}
		return this.cache;
	};
}


document.addEventListener('DOMContentLoaded', function () {
  const elems = document.querySelectorAll('.datepicker')
  M.Datepicker.init(elems, {})
})

document.addEventListener('DOMContentLoaded', function () {
  const elems = document.querySelectorAll('.dropdown-trigger')
  M.Dropdown.init(elems, {})
})

type Order = {
  type: string
  amount: number
  price: string
}

const result = ref<Order[]>([])
const currentPage = ref(0)
const serviceUrl = new UrlBuilder('http://localhost:8080/orders')
serviceUrl.setParameter("limit", "10")

const dateInput = ref<HTMLInputElement | null>(null);

async function getOrders() {
  serviceUrl.setParameter("page", currentPage.value.toString())

  const response = await fetch(serviceUrl.toString(), {
    method: 'GET',
    headers: {
      Accept: 'application/json',
    }
  })

  if (!response.ok) {
    throw new Error(`Error! status: ${response.status}`)
  }

  result.value = await response.json()
}


async function nextOrders() {
    console.log(currentPage.value)
    currentPage.value++
    await getOrders()
}

async function previousOrders() {
    if (currentPage.value > 0) {
      currentPage.value--
      await getOrders()
    }
}

onMounted(() => {
  getOrders()
  if (dateInput.value) {
      M.Datepicker.init(dateInput.value, {
       format: 'dd mmmm, yyyy',
       onSelect: (date: Date) => {
         console.log('Date selected:', date);
       },
     });
   }
})
</script>

<template>
  <div class="max-w-8xl mx-auto p-4">
    <h2 class="text-xl font-bold mb-4">Orders</h2>

    <div class="flex items-center gap-4 mb-4">
      <label class="flex items-center gap-2">
        <span>From</span>
        <input type="text" class="datepicker border rounded p-1" />
      </label>
      <label class="flex items-center gap-2">
        <span>To</span>
        <input type="text" class="datepicker border rounded p-1" />
      </label>

      <a class="dropdown-trigger btn" href="#" data-target="dropdown1">TYPE</a>
      <ul id="dropdown1" class="dropdown-content">
        <li><a href="#!">Buy</a></li>
        <li><a href="#!">Sell</a></li>
      </ul>

      <a class="waves-effect waves-light btn"
          @click="getOrders()"
        >Go</a>

      <div class="flex justify-left mt-4 space-x-2 content-between gap-4">
        <button
          class="px-3 py-1 rounded"
          :class="'bg-blue-500 text-white'"
          @click="nextOrders()"
        >
          Next
        </button>

        <button
          class="px-5 py-1 bg-gray-200 rounded hover:bg-gray-300"
          @click="previousOrders()"
        >
          Back
        </button>
      </div>
    </div>

    <table class="reposive-table w-full border-collapse border border-gray-300">
      <thead>
        <tr class="bg-gray-100">
          <th class="border border-gray-300 p-2 text-left">Type</th>
          <th class="border border-gray-300 p-2 text-right">Amount</th>
          <th class="border border-gray-300 p-2 text-right">Price</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="(order, index) in result" :key="index">
          <td class="border border-gray-300 p-2">{{ order.type }}</td>
          <td class="border border-gray-300 p-2 text-right">{{ order.amount }}</td>
          <td class="border border-gray-300 p-2 text-right">{{ order.price.toFixed(2) }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<style scoped>
/* Optional: minimal styling if not using Tailwind */
</style>
